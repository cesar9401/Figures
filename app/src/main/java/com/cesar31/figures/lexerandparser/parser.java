
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.cesar31.figures.lexerandparser;

import android.os.Build;
import androidx.annotation.RequiresApi;
import com.cesar31.figures.reports.*;
import com.cesar31.figures.graph.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\003\000\002\002\003" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\010\013\000\002\011" +
    "\015\000\002\012\017\000\002\004\006\000\002\004\004" +
    "\000\002\007\011\000\002\006\003\000\002\006\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\013\005\000\002\013\005\000\002\013\003\000\002\013" +
    "\003\000\002\014\005\000\002\014\005\000\002\014\003" +
    "\000\002\015\004\000\002\015\003\000\002\016\003\000" +
    "\002\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\006\003\005\004\006\001\002\000\012\002" +
    "\ufffd\003\125\004\006\012\130\001\002\000\006\002\ufffc" +
    "\020\111\001\002\000\014\005\011\006\013\007\015\010" +
    "\012\011\014\001\002\000\004\002\010\001\002\000\004" +
    "\002\000\001\002\000\004\020\075\001\002\000\004\020" +
    "\016\001\002\000\004\020\075\001\002\000\004\020\056" +
    "\001\002\000\004\020\016\001\002\000\012\003\020\020" +
    "\025\023\024\027\027\001\002\000\012\002\ufff9\003\ufff9" +
    "\004\ufff9\012\ufff9\001\002\000\012\017\uffe5\021\uffe5\022" +
    "\uffe5\023\uffe5\001\002\000\016\017\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\001\002\000\016\017\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\036\025\035\001\002\000\010" +
    "\017\043\022\032\023\033\001\002\000\006\020\025\027" +
    "\027\001\002\000\012\003\020\020\025\023\024\027\027" +
    "\001\002\000\016\017\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\001\002\000\016\017\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\001\002\000\010\021\031\022" +
    "\032\023\033\001\002\000\016\017\uffde\021\uffde\022\uffde" +
    "\023\uffde\024\uffde\025\uffde\001\002\000\010\020\025\023" +
    "\024\027\027\001\002\000\010\020\025\023\024\027\027" +
    "\001\002\000\016\017\uffe7\021\uffe7\022\uffe7\023\uffe7\024" +
    "\036\025\035\001\002\000\010\020\025\023\024\027\027" +
    "\001\002\000\010\020\025\023\024\027\027\001\002\000" +
    "\016\017\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\001\002\000\016\017\uffe3\021\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\001\002\000\016\017\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\036\025\035\001\002\000\016\017\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\001\002\000\012" +
    "\003\020\020\025\023\024\027\027\001\002\000\010\017" +
    "\045\022\032\023\033\001\002\000\012\003\020\020\025" +
    "\023\024\027\027\001\002\000\010\017\047\022\032\023" +
    "\033\001\002\000\012\003\020\020\025\023\024\027\027" +
    "\001\002\000\010\017\051\022\032\023\033\001\002\000" +
    "\006\003\054\016\053\001\002\000\004\021\055\001\002" +
    "\000\004\021\uffed\001\002\000\004\021\uffec\001\002\000" +
    "\012\002\ufff2\003\ufff2\004\ufff2\012\ufff2\001\002\000\012" +
    "\003\020\020\025\023\024\027\027\001\002\000\012\002" +
    "\ufff7\003\ufff7\004\ufff7\012\ufff7\001\002\000\010\017\061" +
    "\022\032\023\033\001\002\000\012\003\020\020\025\023" +
    "\024\027\027\001\002\000\010\017\063\022\032\023\033" +
    "\001\002\000\012\003\020\020\025\023\024\027\027\001" +
    "\002\000\010\017\065\022\032\023\033\001\002\000\012" +
    "\003\020\020\025\023\024\027\027\001\002\000\010\017" +
    "\067\022\032\023\033\001\002\000\012\003\020\020\025" +
    "\023\024\027\027\001\002\000\010\017\071\022\032\023" +
    "\033\001\002\000\006\003\054\016\053\001\002\000\004" +
    "\021\073\001\002\000\012\002\ufff1\003\ufff1\004\ufff1\012" +
    "\ufff1\001\002\000\012\002\ufffa\003\ufffa\004\ufffa\012\ufffa" +
    "\001\002\000\012\003\020\020\025\023\024\027\027\001" +
    "\002\000\010\017\077\022\032\023\033\001\002\000\012" +
    "\003\020\020\025\023\024\027\027\001\002\000\010\017" +
    "\101\022\032\023\033\001\002\000\012\003\020\020\025" +
    "\023\024\027\027\001\002\000\010\017\103\022\032\023" +
    "\033\001\002\000\006\003\054\016\053\001\002\000\004" +
    "\021\105\001\002\000\012\002\ufff3\003\ufff3\004\ufff3\012" +
    "\ufff3\001\002\000\012\002\ufff8\003\ufff8\004\ufff8\012\ufff8" +
    "\001\002\000\012\002\ufffb\003\ufffb\004\ufffb\012\ufffb\001" +
    "\002\000\012\002\ufff6\003\ufff6\004\ufff6\012\ufff6\001\002" +
    "\000\012\003\020\020\025\023\024\027\027\001\002\000" +
    "\012\002\ufff4\003\ufff4\004\ufff4\012\ufff4\001\002\000\012" +
    "\002\ufff5\003\ufff5\004\ufff5\012\ufff5\001\002\000\010\017" +
    "\115\022\032\023\033\001\002\000\012\003\020\020\025" +
    "\023\024\027\027\001\002\000\010\017\117\022\032\023" +
    "\033\001\002\000\012\003\020\020\025\023\024\027\027" +
    "\001\002\000\010\017\121\022\032\023\033\001\002\000" +
    "\014\003\122\016\053\020\025\023\024\027\027\001\002" +
    "\000\012\017\uffe5\021\uffec\022\uffe5\023\uffe5\001\002\000" +
    "\010\017\124\022\032\023\033\001\002\000\014\003\122" +
    "\016\053\020\025\023\024\027\027\001\002\000\006\002" +
    "\ufffc\020\150\001\002\000\010\002\uffff\003\005\004\006" +
    "\001\002\000\004\002\ufffe\001\002\000\004\013\131\001" +
    "\002\000\004\014\132\001\002\000\004\020\134\001\002" +
    "\000\010\002\ufff0\003\ufff0\004\ufff0\001\002\000\012\003" +
    "\020\020\025\023\024\027\027\001\002\000\010\017\136" +
    "\022\032\023\033\001\002\000\012\003\020\020\025\023" +
    "\024\027\027\001\002\000\010\017\140\022\032\023\033" +
    "\001\002\000\010\003\142\010\143\015\144\001\002\000" +
    "\004\021\145\001\002\000\004\021\uffe9\001\002\000\004" +
    "\021\uffea\001\002\000\004\021\uffeb\001\002\000\010\002" +
    "\uffee\003\uffee\004\uffee\001\002\000\004\002\001\001\002" +
    "\000\010\002\uffef\003\uffef\004\uffef\001\002\000\012\003" +
    "\020\020\025\023\024\027\027\001\002\000\010\017\152" +
    "\022\032\023\033\001\002\000\012\003\020\020\025\023" +
    "\024\027\027\001\002\000\010\017\154\022\032\023\033" +
    "\001\002\000\016\003\155\010\143\015\144\020\025\023" +
    "\024\027\027\001\002\000\012\017\uffe5\021\uffe9\022\uffe5" +
    "\023\uffe5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\006\002\006\003\003\001\001\000\010\002" +
    "\126\003\003\004\125\001\001\000\010\010\107\011\112" +
    "\012\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\106\001\001\000\004\011\105" +
    "\001\001\000\004\010\073\001\001\000\004\012\056\001" +
    "\001\000\004\011\016\001\001\000\012\013\022\014\021" +
    "\015\020\016\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\041\001\001\000\012\013\027\014\021\015" +
    "\020\016\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\040\015" +
    "\020\016\025\001\001\000\010\014\033\015\020\016\025" +
    "\001\001\000\002\001\001\000\006\015\037\016\025\001" +
    "\001\000\006\015\036\016\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\043\014\021\015\020\016\025\001\001\000\002" +
    "\001\001\000\012\013\045\014\021\015\020\016\025\001" +
    "\001\000\002\001\001\000\012\013\047\014\021\015\020" +
    "\016\025\001\001\000\002\001\001\000\004\006\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\057\014\021\015\020\016" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\061\014\021\015\020\016\025\001\001\000\002\001" +
    "\001\000\012\013\063\014\021\015\020\016\025\001\001" +
    "\000\002\001\001\000\012\013\065\014\021\015\020\016" +
    "\025\001\001\000\002\001\001\000\012\013\067\014\021" +
    "\015\020\016\025\001\001\000\002\001\001\000\004\006" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\013\075\014\021\015\020\016\025\001" +
    "\001\000\002\001\001\000\012\013\077\014\021\015\020" +
    "\016\025\001\001\000\002\001\001\000\012\013\101\014" +
    "\021\015\020\016\025\001\001\000\002\001\001\000\004" +
    "\006\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\113\014\021\015\020\016\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\115" +
    "\014\021\015\020\016\025\001\001\000\002\001\001\000" +
    "\012\013\117\014\021\015\020\016\025\001\001\000\002" +
    "\001\001\000\014\006\103\013\122\014\021\015\020\016" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\051\013\067\014\021\015\020\016\025\001\001\000" +
    "\012\007\146\010\107\011\112\012\111\001\001\000\006" +
    "\002\145\003\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\132\001\001\000\002" +
    "\001\001\000\012\013\134\014\021\015\020\016\025\001" +
    "\001\000\002\001\001\000\012\013\136\014\021\015\020" +
    "\016\025\001\001\000\002\001\001\000\004\005\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\150\014\021\015\020\016\025" +
    "\001\001\000\002\001\001\000\012\013\152\014\021\015" +
    "\020\016\025\001\001\000\002\001\001\000\014\005\140" +
    "\013\117\014\021\015\020\016\025\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @RequiresApi(api = Build.VERSION_CODES.N)
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        private Symbol cur_token;
        private boolean parsed;
        private HandleError handleErrors;
        private FigureContainer container;

	public parser(FigureLex lex) {
                super(lex);
                // parsed
                this.parsed = true;
                // Reporte de errores
                this.handleErrors = new HandleError();
                // Contenedor de figuras
                this.container = new FigureContainer();
	}

	public void unrecovered_syntax_error(Symbol cur_token) {
                /* parsed */
                this.parsed = false;

                //System.out.println("unrecovered_syntax_error");
                //System.out.println("cur_token: " + symbl_name_from_id(cur_token.sym));
	}

	public void report_error(String message, Object info) {
                /* parsed */
                this.parsed = false;
                /**/

                //System.out.println("report_error");
                //System.out.println("Message: " + message);
                //System.out.println("Object info: " + info);
	}

	public void report_fatal_error(String message, Object info) {
                /* parsed */
                this.parsed = false;

                //System.out.println("report_fatal_error");
                //System.out.println("Message: " + message);
                //System.out.println("Object info: " + info);

                /* Armando reportes de errores */
                List<String> expected = new ArrayList<>();
                List<Integer> tokens = expected_token_ids();
                for(Integer i : tokens) {
                        expected.add(symbl_name_from_id(i));
                }

                /* Reporte de errores */
                this.handleErrors.setError(cur_token, symbl_name_from_id(cur_token.sym), expected);
	}

	public void syntax_error(Symbol cur_token) {
                /* parsed */
                this.parsed = false;

                /* Symbol que provoca sintax_error */
                this.cur_token = cur_token;

                /* Armando reportes de errores */
                List<String> expected = new ArrayList<>();
                List<Integer> tokens = expected_token_ids();
                for(Integer i : tokens) {
                        expected.add(symbl_name_from_id(i));
                }

                /* Reporte de errores */
                this.handleErrors.setError(cur_token, symbl_name_from_id(cur_token.sym), expected);
	}

	public Symbol getCur_token() {
                return this.cur_token;
        }

        protected int error_sync_size() {
                return 1;
	}

        /* Reports */
        public boolean isParsed() {
                return this.parsed;
        }

        public HandleError getHandleError() {
                return this.handleErrors;
        }

        public FigureContainer getContainer() {
                return this.container;
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  @RequiresApi(api = Build.VERSION_CODES.N)
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr ::= draw anim expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= draw anim 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= draw expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= draw 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // draw ::= GRAPH CIRCLE draw4 
            {
              Object RESULT =null;
		int circleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int circleright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object circle = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        container.setFour((DrawFour)circle, "circulo");
                        // System.out.println(" <- circulo");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("draw",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // draw ::= GRAPH SQUARE draw4 
            {
              Object RESULT =null;
		int squareleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int squareright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object square = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        container.setFour((DrawFour)square, "cuadrado");
                        // System.out.println(" <- cuadrado");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("draw",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // draw ::= GRAPH RCTNGL draw5 
            {
              Object RESULT =null;
		int rectangleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rectangleright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rectangle = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        container.setFive((DrawFive) rectangle, "rectangulo");
                        // System.out.println(" <- rectangulo");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("draw",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // draw ::= GRAPH LINE draw5 
            {
              Object RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        container.setFive((DrawFive) line, "linea");
                        // System.out.println(" <- linea");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("draw",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // draw ::= GRAPH POLYGN draw6 
            {
              Object RESULT =null;
		int polygonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int polygonright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object polygon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        container.setPolygon((Polygon) polygon);
                        // System.out.println(" <- poligono");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("draw",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // draw ::= error draw4 
            {
              Object RESULT =null;
		 //System.out.println("draw ::= error draw4"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("draw",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // draw ::= error draw5 
            {
              Object RESULT =null;
		 //System.out.println("draw ::= error draw5"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("draw",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // draw ::= error draw6 
            {
              Object RESULT =null;
		 //System.out.println("draw ::= error draw6"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("draw",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // draw4 ::= LPAREN s COMMA s COMMA s COMMA clr RPAREN 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = new DrawFour(x, y, r, (String)color);
                        // System.out.printf("draw4(%d, %d, %d, %s)", x, y, r, color);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("draw4",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // draw5 ::= LPAREN s COMMA s COMMA s COMMA s COMMA clr RPAREN 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer w = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = new DrawFive(x, y, h, w, (String)color);
                        // System.out.printf("draw5(%d, %d, %d, %d, %s)", x, y, h, w, color);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("draw5",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // draw6 ::= LPAREN s COMMA s COMMA s COMMA s COMMA s COMMA clr RPAREN 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Integer h = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer w = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = new Polygon(x, y, h, w, n, (String) color);
                        // System.out.printf("draw6(%d, %d, %d, %d, %d, %s)", x, y, h, w, n, color);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("draw6",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // anim ::= ANIMT OBJ ANT opan 
            {
              Object RESULT =null;
		int animationleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int animationright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object animation = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        container.setAnimation((Animation) animation);
                       //  System.out.println(" <- animar objeto anterior");
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("anim",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // anim ::= error opan 
            {
              Object RESULT =null;
		 //System.out.println("anim ::= error opan"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("anim",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // opan ::= LPAREN s COMMA s COMMA kanim RPAREN 
            {
              Object RESULT =null;
		int xfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int xfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer xf = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int yfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int yfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer yf = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int kindleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int kindright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object kind = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = new Animation(xf, yf, (String)kind);
                        // System.out.printf("opan(%d, %d, %s)", xf, yf, kind);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opan",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // clr ::= COLOR 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = color; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // clr ::= error 
            {
              Object RESULT =null;
		 //System.out.println("clr ::= error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // kanim ::= CURVE 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("kanim",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // kanim ::= LINE 
            {
              Object RESULT =null;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("kanim",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // kanim ::= error 
            {
              Object RESULT =null;
		 //System.out.println("kanim ::= error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("kanim",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // s ::= s PLUS t 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1 + n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // s ::= s MINUS t 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1 - n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // s ::= t 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // s ::= error 
            {
              Integer RESULT =null;
		 //System.out.println("s ::= error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // t ::= t TIMES u 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1 * n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // t ::= t DIV u 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1 / n2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // t ::= u 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // u ::= MINUS e 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  -n1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("u",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // u ::= e 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("u",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // e ::= ENTERO 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // e ::= LPAREN s RPAREN 
            {
              Integer RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = n1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("e",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  @RequiresApi(api = Build.VERSION_CODES.N)
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
