package com.cesar31.figures.lexerandparser;

import android.os.Build;

import androidx.annotation.RequiresApi;

import com.cesar31.figures.reports.*;
import com.cesar31.figures.graph.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;

parser code {:

        private Symbol cur_token;
        private boolean parsed;
        private HandleError handleErrors;
        private FigureContainer container;

	public parser(FigureLex lex) {
                super(lex);
                // parsed
                this.parsed = true;
                // Reporte de errores
                this.handleErrors = new HandleError();
                // Contenedor de figuras
                this.container = new FigureContainer();
	}

	public void unrecovered_syntax_error(Symbol cur_token) {
                /* parsed */
                this.parsed = false;

                //System.out.println("unrecovered_syntax_error");
                //System.out.println("cur_token: " + symbl_name_from_id(cur_token.sym));
	}

	public void report_error(String message, Object info) {
                /* parsed */
                this.parsed = false;
                /**/

                //System.out.println("report_error");
                //System.out.println("Message: " + message);
                //System.out.println("Object info: " + info);
	}

	public void report_fatal_error(String message, Object info) {
                /* parsed */
                this.parsed = false;

                //System.out.println("report_fatal_error");
                //System.out.println("Message: " + message);
                //System.out.println("Object info: " + info);

                /* Armando reportes de errores */
                List<String> expected = new ArrayList<>();
                List<Integer> tokens = expected_token_ids();
                for(Integer i : tokens) {
                        expected.add(symbl_name_from_id(i));
                }

                /* Reporte de errores */
                this.handleErrors.setError(cur_token, symbl_name_from_id(cur_token.sym), expected);
	}

	public void syntax_error(Symbol cur_token) {
                /* parsed */
                this.parsed = false;

                /* Symbol que provoca sintax_error */
                this.cur_token = cur_token;

                /* Armando reportes de errores */
                List<String> expected = new ArrayList<>();
                List<Integer> tokens = expected_token_ids();
                for(Integer i : tokens) {
                        expected.add(symbl_name_from_id(i));
                }

                /* Reporte de errores */
                this.handleErrors.setError(cur_token, symbl_name_from_id(cur_token.sym), expected);
	}

	public Symbol getCur_token() {
                return this.cur_token;
        }

        protected int error_sync_size() {
                return 1;
	}

        /* Reports */
        public boolean isParsed() {
                return this.parsed;
        }

        public HandleError getHandleError() {
                return this.handleErrors;
        }

        public FigureContainer getContainer() {
                return this.container;
        }
:}

terminal GRAPH, CIRCLE, SQUARE, RCTNGL, LINE, POLYGN, ANIMT, OBJ, ANT, CURVE, COLOR;
terminal COMMA, LPAREN, RPAREN, PLUS, MINUS, TIMES, DIV, ERROR;
terminal Integer ENTERO;

non terminal expr, draw, anim, kanim, clr, opan, draw4, draw5, draw6;
non terminal Integer s, t, u, e;

expr    ::=     draw anim expr
                | draw anim
                | draw expr
                | draw
                | error
                ;

draw    ::=     GRAPH CIRCLE draw4:circle
                {:
                        container.setFour((DrawFour)circle, "circulo");
                        // System.out.println(" <- circulo");
                :}
                | GRAPH SQUARE draw4:square
                {:
                        container.setFour((DrawFour)square, "cuadrado");
                        // System.out.println(" <- cuadrado");
                :}
                | GRAPH RCTNGL draw5:rectangle
                {:
                        container.setFive((DrawFive) rectangle, "rectangulo");
                        // System.out.println(" <- rectangulo");
                :}
                | GRAPH LINE draw5:line
                {:
                        container.setFive((DrawFive) line, "linea");
                        // System.out.println(" <- linea");
                :}
                | GRAPH POLYGN draw6:polygon
                {:
                        container.setPolygon((Polygon) polygon);
                        // System.out.println(" <- poligono");
                :}
                | error draw4
                {: //System.out.println("draw ::= error draw4"); :}
                | error draw5
                {: //System.out.println("draw ::= error draw5"); :}
                | error draw6
                {: //System.out.println("draw ::= error draw6"); :}
                ;

draw4   ::=     LPAREN s:x COMMA s:y COMMA s:r COMMA clr:color RPAREN
                {:
                        RESULT = new DrawFour(x, y, r, (String)color);
                        // System.out.printf("draw4(%d, %d, %d, %s)", x, y, r, color);
                :}
                ;

draw5   ::=     LPAREN s:x COMMA s:y COMMA s:h COMMA s:w COMMA clr:color RPAREN
                {:
                        RESULT = new DrawFive(x, y, h, w, (String)color);
                        // System.out.printf("draw5(%d, %d, %d, %d, %s)", x, y, h, w, color);
                :}
                ;

draw6   ::=     LPAREN s:x COMMA s:y COMMA s:h COMMA s:w COMMA s:n COMMA clr:color RPAREN
                {:
                        RESULT = new Polygon(x, y, h, w, n, (String) color);
                        // System.out.printf("draw6(%d, %d, %d, %d, %d, %s)", x, y, h, w, n, color);
                :}
                ;

anim    ::=     ANIMT OBJ ANT opan:animation
                {:
                        container.setAnimation((Animation) animation);
                       //  System.out.println(" <- animar objeto anterior");
                :}
                | error opan
                {: //System.out.println("anim ::= error opan"); :}
                ;

opan    ::=     LPAREN s:xf COMMA s:yf COMMA kanim:kind RPAREN
                {:
                        RESULT = new Animation(xf, yf, (String)kind);
                        // System.out.printf("opan(%d, %d, %s)", xf, yf, kind);
                :}
                ;

clr     ::=     COLOR:color
                {: RESULT = color; :}
                | error
                {: //System.out.println("clr ::= error"); :}
                ;

kanim   ::=     CURVE:t1
                {: RESULT = t1; :}
                | LINE:t2
                {: RESULT = t2; :}
                | error
                {: //System.out.println("kanim ::= error"); :}
                ;

s       ::=     s:n1 PLUS t:n2
                {: RESULT = n1 + n2; :}
                | s:n1 MINUS t:n2
                {: RESULT = n1 - n2; :}
                | t:n1
                {: RESULT = n1; :}
                | error
                {: //System.out.println("s ::= error"); :}
                ;

t       ::=     t:n1 TIMES u:n2
                {: RESULT = n1 * n2; :}
                | t:n1 DIV u:n2
                {: RESULT = n1 / n2; :}
                | u:n1
                {: RESULT = n1; :}
                ;

u       ::=     MINUS e:n1
                {: RESULT =  -n1; :}
                | e:n1
                {: RESULT = n1; :}
                ;

e       ::=     ENTERO:n1
                {: RESULT = n1; :}
                | LPAREN s:n1 RPAREN
                {: RESULT = n1; :}
                ;
